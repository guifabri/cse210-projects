<!DOCTYPE html>
<html lang="en-us"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>CSE 210 | Abstraction Design Activity</title>
  <link rel="preconnect" href="https://fonts.googleapis.com/">
  <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="">
  <link href="CSE%20210%20Abstraction%20Design%20Activity_files/css2.css" rel="stylesheet">
  <link rel="stylesheet" href="CSE%20210%20Abstraction%20Design%20Activity_files/course.css">
  <link rel="stylesheet" href="CSE%20210%20Abstraction%20Design%20Activity_files/default.min.css">

</head>

<body>
  <header>
    <div class="page">
      <h1>CSE 210<span id="coursetitle">: Programming with Classes</span></h1>
      <img src="CSE%20210%20Abstraction%20Design%20Activity_files/byui-logo.svg" alt="BYU-I logo" class="logo">
    </div>
  </header>
  <main class="page">
    <nav id="autogen-top-nav">
      <!-- This nav is auto-generated -->
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/index.html">Home</a></span>
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/week01/index.html">W1</a></span>
      <span class="active"><a href="https://byui-cse.github.io/cse210-ww-course-2023/week02/index.html">W2</a></span>
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/week03/index.html">W3</a></span>
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/week04/index.html">W4</a></span>
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/week05/index.html">W5</a></span>
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/week06/index.html">W6</a></span>
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/week07/index.html">W7</a></span>
      <!-- end auto-generated -->
    </nav>
    <h2>Abstraction - Design Activity</h2>

    <h3>Overview</h3>
    <!-- <p>The activity will help you create the design for your developer project.</p>
 -->
      <p>This activity will walk you through the process of creating a 
design for your developer project. It is very important that you 
understand the decisions and tradeoffs that are made along the way so 
that later on, you can produce a design on your own with less guidance.</p>

    <div class="callout info">
      <h4>Team Activity Instructions</h4>
      <p>This activity is designed to be completed as a team, working together synchronously on a video call.</p>
  
      <p>For this and future team activities, you will choose someone to
 be the lead student. The lead student should help guide the discussion 
and ask the questions. Then, you will choose a different person to be 
the lead student for the next meeting.</p>
    </div>

    <p>This activity contains two kinds of questions. The first are 
questions that help you build up the design. To make sure that you have a
 solid design to use for your program, "Guidance from a Mentor" will be 
provided to help.</p>

    <div class="callout discussion">
      <h4>Guidance from a Mentor</h4>
      <p>This activity is designed to help you walk through the design 
process as a team. Because decisions in the first steps determine many 
steps that follow, we want to make sure you do not start down a path 
that will lead to problems later. Similarly, when you start writing the 
code for your project, it is important that you have a solid design to 
work from, and one that will will reinforce the concepts of the course.</p>

      <p>If we were in a conference room together at a company, a mentor
 could quietly observe the discussion and only interject if the 
conversation started to lead in a bad direction.</p>

      <p>In the case of this activity, because the instructor cannot be 
in each team meeting, we have placed expandable "Guidance from a Mentor"
 sections throughout the design process. You should <strong>not</strong> expand and look at these sections until you have done your best as a team to answer the questions. Then, <strong>after</strong> you have answered the questions, you should check these Guidance sections to make sure you are headed in a good direction.</p>
  
      <p>Keep in mind that there are often many good designs for a given
 problem, but for this project, you should use the design created here 
to make sure that you have a good approach that will also reinforce the 
principles of the lesson.</p>
      <p>Make sure to expand and read each Guidance from a Mentor section as you move through the activity.</p>
      </div>

    <!-- <h4>Evaluate the Design</h4> -->
    <p>In addition to the design questions which contain Guidance from a
 Mentor, you will also see questions to help you evaluate the design, as
 show below:</p>

    <div class="callout info">
      <h5>Evaluate the Design</h5>
      <ul>
        <li>This is an example of how questions will appear.</li>
      </ul>
    </div>

    <p>These questions will give you a chance to examine the reason for 
making certain decisions, and to compare and contrast various design 
possibilities. You should discuss these questions as a group, just as 
with the other questions, but they will not contain solutions in a 
"Guidance from a Mentor" box. Instead, at the end of the activity (or 
during the activity if you would like) you will submit a quiz with your 
answers to the "Evaluate the Design" questions. Keep in mind that you 
can submit this quiz multiple times if you would like.</p>
      
    <h3 class="step-reset">Agenda</h3>
    <p>Use the following as an agenda for your team meeting. Whoever is 
assigned to be the lead student for this gathering should help guide the
 group through these steps and ask the questions listed here.</p>

    <h4 class="step">Before the meeting: Verify the time, location, and lead student</h4>
    <p>This could be as simple as posting a message to your MS Teams channel that says something like, <em>"Hi guys, are we still planning to meet tomorrow at 7pm Mountain Time? Let's use the MS Teams video feature again."</em> Or, if someone else has already posted a message like this, it could be as simple as "liking" their message.</p>

    <p>Make sure to identify who will be the lead student for this week. For example, <em>"Emily, are you still good to be the lead student for this week?"</em></p>

    <h4 class="step">Begin with Prayer</h4>

    <h4 class="step">Discuss the Preparation Learning Activity</h4>
    <p>Take a minute to talk about the learning activity from this week.
 Talk through any difficulties that people had understanding the 
material or completing the activity.</p>
    
    <ul>
      <li>What part of the learning activity was the hardest for you?</li>
    </ul>

    <h4 class="step">Review the Program Specification</h4>
    <p>Refer to the <a href="https://byui-cse.github.io/cse210-ww-course-2023/week02/develop.html">Journal program specification</a>. As a team, review the program requirements and how it is supposed to work.</p>
    <ol>
      <li>What does the program do?</li>
      <li>What user inputs does it have?</li>
      <li>What output does it produce?</li>
      <li>How does the program end?</li>
    </ol>

    <details>
      <summary>
        Guidance from a Mentor
      </summary>

      <p>A good way to think about these questions is to look at the 
menu options for the program. They will help you think about the various
 features of the program.</p>

    </details>

    <h4 class="step">Determine the classes</h4>
    <p>The first step in designing a program like this is to think about
 the classes you will need. When thinking about classes, it is often 
helpful to consider the strong nouns in the program description.</p>

    <ol>
      <li>What are good candidates for classes in this program?</li>
      <li>What are the primary responsibilities of each class?</li>
    </ol>

    <details>
      <summary>
        Guidance from a Mentor
      </summary>
      <p>The following are good choices for classes, listed with their responsibilities:</p>
      <ul>
        <li><code>Journal</code>: Stores a list of journal entries</li>
        <li><code>Entry</code>: Represents a single journal entry.</li>
        <li><code>PromptGenerator</code>: Supplies random prompts whenever needed.</li>
      </ul>

      <p>In addition, your program will also have a <code>Program</code>
 class that is the starting point for the program and handles much of 
the user interaction. Because all programs contain this class, and 
because it is usually simple, only containing a few static methods, and 
we do not not even create an instance of it, you will often see it 
excluded from lists like this, where instead, we focus on the classes 
that model the components of our specific problem.</p>

      <p>You might have also considered a "file" class, but in this 
case, the main concepts to model are the journal and the entry. Being 
able to load and save these journal entries could be behaviors of these 
classes, and then you wouldn't need an extra <code>File</code> class. It
 could certainly be a valid approach to have a class for all the file 
interaction with methods like SaveToFile and LoadFromFile. These are the
 hard decisions that programmers have to weigh back and forth. For this 
program, we will let the <code>Journal</code> class take care of this behavior.</p>

      <p>Does the prompt generator really need to be it's own class or 
could it simply be a method? This is a good question. But by making the 
prompt generator a class, it can abstract any details associated with 
generating prompts, such as whether they are loaded from a file, scraped
 from an internet source, or to make sure make sure duplicate prompts 
are not given. You may not want all those features now, but the benefit 
of abstraction is that you could add them later on and not have to 
change the way the rest of the program works. So, for that reason, it 
makes good sense to create it as a class now.</p>
    </details>

    <div class="callout info">
      <h5>Evaluate the Design</h5>
      <ul>
        <li>If you followed the design from the "Guidance from a Mentor"
 section, and then in the future, you changed your program so that the 
prompts were retrieved directly from a Web database, how many classes 
would have to be updated?</li>
      </ul>
    </div>

    <h4 class="step">Define class behaviors</h4>
    <p>Now that you have decided on the classes you will need and their 
responsibilities, the next step is to define the behaviors of these 
classes. These will become the methods of each class.</p>

    <p>Go through each of your classes and ask:</p>
    <ol>
      <li>What are the behaviors this class will have in order to 
fulfill its responsibilities? (In other words, what things should this 
class <em>do</em>?)</li>
    </ol>

    <details>
      <summary>
        Guidance from a Mentor
      </summary>

      <p>Clearly, the PromptGenerator class needs to generate prompts.</p>

      <p>Many behaviors of the <code>Journal</code> class also come out nicely from the specification. For example, a journal needs to include behaviors such as:</p>
      <ul>
        <li>Adding an entry</li>
        <li>Displaying all the entries</li>
        <li>Saving to a file</li>
        <li>Loading from a file</li>
      </ul>

      <p>The <code>Entry</code> class doesn't have too many behaviors. 
It's main responsibility is to hold data. And yet, because it is in 
charge of everything that has to do with entries, it would make sense 
for it to at least have it's own display method. Then, the <code>Journal</code> display method could iterate through all <code>Entry</code> objects and call the <code>Entry</code> display method. The <code>Journal</code> wouldn't have to worry about the details of how the <code>Entry</code> was displayed, this would all be contained within the <code>Entry</code> class.</p>

      <p>Converting these ideas to concise method names gives us the 
following (note that the variable types and return types are shown after
 the <code>:</code> colon character):</p>
      <ul>
        <li>
          <code>Journal</code>
          <ul>
            <li><code>AddEntry(newEntry : Entry) : void</code></li>
            <li><code>DisplayAll() : void</code></li>
            <li><code>SaveToFile(file : string)</code></li>
            <li><code>LoadFromFile(file : string)</code></li>
          </ul>
        </li>
        <li>
          <code>Entry</code>
          <ul>
            <li><code>Display() : void</code></li>
          </ul>
        </li>
        <li>
          <code>PromptGenerator</code>
          <ul>
            <li><code>GetRandomPrompt() : string</code></li>
          </ul>
        </li>

      </ul>

    </details>

    <div class="callout info">
      <h5>Evaluate the Design</h5>
      <ul>
        <li>What are the potential benefits of having a <code>Display</code> method in the <code>Entry</code> class rather than allowing the <code>Journal</code>'s display method to display an entry's date and text directly?</li>
      </ul>
    </div>


    <h4 class="step">Define class attributes</h4>
    <p>Now that you have defined the classes, their responsibilities, 
and their behaviors, the next step is to determine what attributes the 
class should have, or what variables it needs to store.</p>

    <p>Go through each of your classes and ask:</p>
    <ol>
      <li>What attributes does this class need to fulfill its behaviors? (In other words, what member variables should this class <em>store</em>?)</li>
      <li>What are the data types of these member variables?</li>
    </ol>

    <details>
      <summary>
        Guidance from a Mentor
      </summary>

      <p>A <code>Journal</code> should store a list of <code>Entry</code> objects. The data type for this should be <code>List&lt;Entry&gt;</code></p>
      <p>An <code>Entry</code> should keep track of the date, prompt text, and the text of the entry itself.</p>
      <p>In our design, the prompt generator should store a list of potential prompts that it can select from randomly when needed.</p>

      <p>Converting these ideas into concise variable names along with their data types gives us the following:</p>

      <ul>
        <li>
          <code>Journal</code>
          <ul>
            <li><code>_entries : List&lt;Entry&gt;</code></li>
          </ul>
        </li>
        <li>
          <code>Entry</code>
          <ul>
            <li><code>_date : string</code></li>
            <li><code>_promptText : string</code></li>
            <li><code>_entryText : string</code></li>
          </ul>
        </li>
        <li>
          <code>PromptGenerator</code>
          <ul>
            <li><code>_prompts : List&lt;string&gt;</code></li>
          </ul>
        </li>

      </ul>

    </details>

    <h4 class="step">Review the Design</h4>
    <p>Take a minute to review your final design.</p>
    <ol>
      <li>Are there any classes, methods, or variables, that you do not understand?</li>
    </ol>

    <details>
      <summary>Guidance from a Mentor</summary>
      <p>The following is a final class diagram for each of the classes that you can use as a guide as you being writing your code.</p>

      <figure>
        <img src="CSE%20210%20Abstraction%20Design%20Activity_files/journal-program-class-diagram.png" alt="Journal program class diagram">
      </figure>

    </details>


    <div class="callout info">
      <h5>Evaluate the Design</h5>
      <ul>
        <li>Using this design, when you want to add a new entry to the journal, you will use code such as <code>theJournal.AddEntry(anEntry);</code> instead of using the _entries variable and its add method like this <code>theJournal._entries.Add(anEntry);</code>. What is a benefit of our design approach (the <code>AddEntry</code> method), instead of accessing the variable directly?</li>
      </ul>
    </div>


    <h4 class="step">Conclude the Meeting</h4>
    <p>At this point, you have the design of the classes you will need 
for this project. If your design is not "perfect," or it needs to change
 a little as you begin working on the project, that is just fine! As you
 learn more details, you will naturally need to adjust your planning. 
This is why the principles of programming with class are so valuable, 
because they allow your program to easily change.</p>

    <p>At the end of your meeting:</p>
    <ul>
      <li>Determine who will be the lead student for the next meeting.</li>
    </ul>

    <h4 class="step">After the Meeting: Start the code</h4>
    <p>Now that you have a design for your classes in mind. The next step is to start the code of the program.</p>
    <p>You begin programs with classes by creating "stubs" for 
everything in your design, or in other words, an empty skeleton that 
contains all of the classes from your design with all of the member 
variables and methods. At this point, the methods can be (mostly) empty.
 You will fill them in later as you begin the program.</p>

    <div class="callout info">
      <h5>Avoid Build Errors</h5>
      <p>One important factor as you "stub out" your program is that you
 want to make sure that it can built (we often say "compiled") without 
errors. This is why some of your methods cannot be completely empty.</p>
      <p>If the function has a <code>void</code> return type, meaning it does not return anything, it can be left completely empty.</p>
      <p>However, if the function has a return type, you will need to return <em>something</em>, or else you will have errors when you try to run it. For example, if the return type is <code>string</code> then you might include <code>return "";</code> as a single line of the function so that it will not have errors.</p>

    </div>

    <p>After the team activity, each person needs to individually do the the following:</p>
    <ol>
      <li><p>Open the project in VS Code. Create new files that contain 
the "stubs" or empty code for all the classes, member variables, and 
functions in your design.</p>
        <ul>
          <li>At this point the body of the methods can be empty, except for the necessary return statements.</li>
          <li>Each class should be in its own file and the name of the file should match the class name (for example, <code>Journal.cs</code>).</li>
        </ul>
      </li><li>Make sure that your program can build without errors.</li>
      <li>Commit and push your code to your GitHub repository.</li>
    </ol>

    <details>
      <summary>Need help getting started?</summary>
      <p>If you are not sure how to start the code based on this design, watch the following short video that walks through this process:</p>

      <ul>
        <li><a href="https://video.byui.edu/media/t/1_vmeovorz" target="_blank">Starting the Code</a> (9 mins)</li>
      </ul>

    </details>


    <h3>Submission</h3>

    <p>After completing this activity, <a href="https://byui.instructure.com/calendar#view_name=agenda" target="_blank">Return to I-Learn</a> to submit two quizzes associated with this activity:
    </p><ol>
      <li><strong>The Evaluate the Design quiz</strong>: This is where you respond to the "Evaluate the Design" questions. You may take this quiz 3 times.</li>
      <li><strong>The Participation quiz</strong>: This is where you 
report on your participation with your team. The lowest score from this 
category will be dropped at the end of the course. So if you need to 
miss one meeting for any reason, it will not be a problem, but it if 
becomes a pattern, you will not earn full points for your teamwork.</li>
    </ol>
        
        
     <!-- <p>This quiz will ask about the following:</p>
        <ol>
          <li>Your participation in the team meeting.</li>
          <li>Your answers to the "Evaluate the Design" questions.</li>
          <li>Your progress on starting the program.</li>
        </ol> -->


  </main>

  <footer>
    <p>Copyright © Brigham Young University-Idaho | All rights reserved</p>
  </footer>
  <script src="CSE%20210%20Abstraction%20Design%20Activity_files/highlight.min.js"></script>
  <script>hljs.highlightAll();</script>



</body></html>