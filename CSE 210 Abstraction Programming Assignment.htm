<!DOCTYPE html>
<html lang="en-us"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>CSE 210 | Abstraction Programming Assignment</title>
  <link rel="preconnect" href="https://fonts.googleapis.com/">
  <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="">
  <link href="CSE%20210%20Abstraction%20Programming%20Assignment_files/css2.css" rel="stylesheet">
  <link rel="stylesheet" href="CSE%20210%20Abstraction%20Programming%20Assignment_files/course.css">
  <link rel="stylesheet" href="CSE%20210%20Abstraction%20Programming%20Assignment_files/default.min.css">

</head>

<body>
  <header>
    <div class="page">
      <h1>CSE 210<span id="coursetitle">: Programming with Classes</span></h1>
      <img src="CSE%20210%20Abstraction%20Programming%20Assignment_files/byui-logo.svg" alt="BYU-I logo" class="logo">
    </div>
  </header>
  <main class="page">
    <nav id="autogen-top-nav">
      <!-- This nav is auto-generated -->
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/index.html">Home</a></span>
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/week01/index.html">W1</a></span>
      <span class="active"><a href="https://byui-cse.github.io/cse210-ww-course-2023/week02/index.html">W2</a></span>
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/week03/index.html">W3</a></span>
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/week04/index.html">W4</a></span>
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/week05/index.html">W5</a></span>
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/week06/index.html">W6</a></span>
      <span><a href="https://byui-cse.github.io/cse210-ww-course-2023/week07/index.html">W7</a></span>
      <!-- end auto-generated -->
    </nav>
    <h2>Week 02 Develop: Journal Program</h2>

    <h3>Problem Overview</h3>
    <p>Many people see the value of keeping a journal to record 
important events, and many people even set this as a goal. And yet, very
 few people actually follow through and keep a journal consistently.</p>
    <p>Think to yourself for a moment: What are some reasons people do 
not follow through with their goal to keep a journal? Could a program or
 app help with any of these?</p>

    <p>Some of the reasons you thought of might include the following:</p>
    <ul>
      <li>We forget</li>
      <li>It's not convenient to get out our written journal or find the electronic document</li>
      <li>We don't feel like we have anything interesting to say</li>
      <li>We don't feel like we have time for it</li>
      <li>We aren't sure what to write</li>
      <li>We feel overwhelmed with writing every event of the day, so we just don't write anything.</li>
    </ul>

    <p>While it will not solve all of people's problems, a great program
 or an app could help remove some of these barriers. For example, an app
 could give you a reminder at a certain time of day or give you a direct
 link to your document.</p>

    <p>Consider the last challenge mentioned above, that of being 
overwhelmed because it feels like you must write every event during the 
day, this seems to be a big problem for many people. Could an app help 
with this?</p>

    <h3>Solution Idea</h3>
    <p>What if the Journal app gave people a simple prompt to respond to
 every day? It could also record the response somewhere for them and 
even add elements like the data automatically.</p>

    <p>These features could help address some of the challenges that 
keep people from journaling, and could be included in a mobile app or on
 a web page. The actual interface is not that critical, but the ability 
for a program to help solve a real problem is important to recognize.</p>

    <h3>Program Specification</h3>
    <p>For this assignment you will write a program to help people 
record the events of their day by supplying prompts and then saving 
their responses along with the question and the date to a file.</p>

    <h4>Functional Requirements</h4>
    <p>This program must contain the following features:</p>
    <ol>
        <li>Write a new entry - Show the user a random prompt (from a 
list that you create), and save their response, the prompt, and the date
 as an Entry.</li>
        <li>Display the journal - Iterate through all entries in the journal and display them to the screen.</li>
        <li>Save the journal to a file - Prompt the user for a filename 
and then save the current journal (the complete list of entries) to that
 file location.</li>
        <li>Load the journal from a file - Prompt the user for a 
filename and then load the journal (a complete list of entries) from 
that file. This should replace any entries currently stored the journal.</li>
        <li>Provide a menu that allows the user choose these options</li>
        <li>Your list of prompts must contain at least five different 
prompts. Make sure to add your own prompts to the list, but the 
following are examples to help get you started:
          <ul>
            <li>Who was the most interesting person I interacted with today?</li>
            <li>What was the best part of my day?</li>
            <li>How did I see the hand of the Lord in my life today?</li>
            <li>What was the strongest emotion I felt today?</li>
            <li>If I had one thing I could do over today, what would it be?</li>
          </ul>

        </li>
        <li>Your interface should generally follow the pattern shown in the video demo below.</li>
      </ol>
     
    <h4>Design Requirements</h4>
    <p>In addition, your program must:</p>
    <ol>
      <li>Contain classes for the major components in the program.</li>
      <li>Contain at least two classes in addition to the <code>Program</code> class.</li>
      <li>Demonstrate the principle of abstraction by using member variables and methods appropriately.</li>
    </ol>

    <h4>Simplifications</h4>
    <p>For the core requirements you do <strong>not</strong> need to worry about the following:</p>
    <ol>
      <li>Saving your file as a .csv file requires you to handle commas 
and quotes in the content appropriately. At this point, you can ignore 
that and just choose a symbol for a separator that you think is unlikely
 to show up in the content (such as <code>|</code> or <cod>~</cod> or <code>~|~</code>).</li>
      <li>You do not need to store the date as an actual C# <code>DateTime</code> object in your class or in the file. You can simply store it as a string.</li>
    </ol>

    <h4>Showing Creativity and Exceeding Requirements</h4>
    <p>Meeting the core requirements makes your program eligible to 
receive a 93%. To receive 100% on the assignment, you need to show 
creativity and exceed these requirements.</p>
    <p>Here are some ideas you might consider:</p>

    <ul>
      <li>Think of other problems that keep people from writing in their journal and address one of those.</li>
      <li>Save other information in the journal entry.</li>
      <li>Improve the process of saving and loading to save as a .csv 
file that could be opened in Excel (make sure to account for quotation 
marks and commas correctly in your content.</li>
      <li>Save or load your document to a database or use a different library or format such as JSON for storage.</li>
    </ul>

    <p>Report on what you have done to exceed requirements by adding a description of it in a comment in the Program.cs file.</p>

    <h4>Video Demo</h4>
    <p>The following video demonstrates the way this program should work:</p>

    <p>Direct link: <a href="https://video.byui.edu/media/t/1_6ya4vtjb" target="_blank">Journal Program Demo</a> (3 minutes)</p>
    
    <figure class="video-container">
      <iframe id="kaltura_player" src="https://cdnapisec.kaltura.com/p/1157612/sp/115761200/embedIframeJs/uiconf_id/41338032/partner_id/1157612?iframeembed=true&amp;playerId=kaltura_player&amp;entry_id=1_6ya4vtjb&amp;flashvars[localizationCode]=en&amp;flashvars[leadWithHTML5]=true&amp;flashvars[sideBarContainer.plugin]=true&amp;flashvars[sideBarContainer.position]=left&amp;flashvars[sideBarContainer.clickToClose]=true&amp;flashvars[chapters.plugin]=true&amp;flashvars[chapters.layout]=vertical&amp;flashvars[chapters.thumbnailRotator]=false&amp;flashvars[streamSelector.plugin]=true&amp;flashvars[EmbedPlayer.SpinnerTarget]=videoHolder&amp;flashvars[dualScreen.plugin]=true&amp;flashvars[Kaltura.addCrossoriginToIframe]=true&amp;&amp;wid=1_3xbqixpl" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen="" allow="autoplay *; fullscreen *; encrypted-media *" sandbox="allow-downloads allow-forms allow-same-origin allow-scripts allow-top-navigation allow-pointer-lock allow-popups allow-modals allow-orientation-lock allow-popups-to-escape-sandbox allow-presentation allow-top-navigation-by-user-activation" frameborder="0" title="CSE 210 Journal Program Demo"></iframe>
    </figure>


    <h3>Code Helps</h3>
    <p>You might find the following code helps useful in this project:</p>
    <details>
      <summary>Reading Text Files in C#</summary>

      <p>The easiest way to read a text file in C# is to read the entire file into an array of strings (one per line) using the <code>System.IO.File.ReadAllLines()</code> function. Then, you can iterate through each <code>string</code> as you would with any list.</p>

      <p>As you go through each string, you can split it based on a separator character and get the pieces you need by their index.</p>

      <p>The following shows an example of reading a file and splitting up the strings.</p>

<pre><code class="csharp hljs language-csharp">
<span class="hljs-built_in">string</span> filename = <span class="hljs-string">"myFile.txt"</span>;
<span class="hljs-built_in">string</span>[] lines = System.IO.File.ReadAllLines(filename);

<span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">string</span> line <span class="hljs-keyword">in</span> lines)
{
    <span class="hljs-built_in">string</span>[] parts = line.Split(<span class="hljs-string">","</span>);

    <span class="hljs-built_in">string</span> firstName = parts[<span class="hljs-number">0</span>];
    <span class="hljs-built_in">string</span> lastName = parts[<span class="hljs-number">1</span>];
}
</code></pre>      

      <p>There are many other ways to work with files in C# some of 
which would be more efficient if the file is very large and you don't 
want to store it all in memory at once, but this approach will work just
 fine for this project.</p>
    </details>

    <details>
      <summary>Writing Text Files in C#</summary>

      <p>You can create or write a text file in C# using a class the <code> System.IO.StreamWriter</code> class. When you create an object of this class you can use the <code>Write()</code> and <code>WriteLine()</code> methods in the same way as the <code>Console.Write()</code> methods, except that they will write the strings to the file instead of to the Console.</p>

      <p>To make sure the file gets closed and cleaned up appropriately when you are done, it is best practice to put the <code>StreamWriter</code> object in a <code>using()</code> block. This works the same as a "<code>with</code>" block in Python and ensures that the resources are cleaned up when you leave that area of the code.</p>
        
      <p>The following shows an example of writing text to a new file</p>

<pre><code class="csharp hljs language-csharp">
<span class="hljs-comment">// Don't forget to put this at the top, so C# knows where to find the StreamWriter class</span>
<span class="hljs-keyword">using</span> System.IO; 

...

<span class="hljs-built_in">string</span> fileName = <span class="hljs-string">"myFile.txt"</span>;

<span class="hljs-keyword">using</span> (StreamWriter outputFile = <span class="hljs-keyword">new</span> StreamWriter(filename))
{
    <span class="hljs-comment">// You can add text to the file with the WriteLine method</span>
    outputFile.WriteLine(<span class="hljs-string">"This will be the first line in the file."</span>);
    
    <span class="hljs-comment">// You can use the $ and include variables just like with Console.WriteLine</span>
    <span class="hljs-built_in">string</span> color = <span class="hljs-string">"Blue"</span>;
    outputFile.WriteLine(<span class="hljs-string">$"My favorite color is <span class="hljs-subst">{color}</span>"</span>);
}
</code></pre> 
    </details>

    <details>
      <summary>Working with Dates in C#</summary>

      <p>C# has a class that is used for working with dates and time of day called, <code>DateTime</code>.</p>
      <p>You can get an object representing the current day and time with <code>DateTime.Now</code>. Then, it has various methods that are helpful, such as <code>.ToShortDateString()</code>.</p>

<pre><code class="csharp hljs language-csharp">
DateTime theCurrentTime = DateTime.Now;
<span class="hljs-built_in">string</span> dateText = theCurrentTime.ToShortDateString();
</code></pre> 
    </details>

    <div class="callout info">
      <h5>Still having difficulty reading and writing files?</h5>
      <p>The following video walks through through the development of a 
program that reads and writes a list of objects to a file in a similar 
way that you will need to for your program:</p>
      <ul>
        <li><a href="https://video.byui.edu/media/t/1_uoyhkbf2" target="_blank">CSV Reading and Writing Demo</a> (20 Minutes)</li>
      </ul>
    </div>

    <div class="callout warning">
      <p><strong>Remember</strong>: Do not ever click "Debug Anyway".</p>
      <p>If you have an error in your program and try to run it, VS Code
 will tell you that it cannot build a new version of your program to 
run. But, it may find an old version from the last time it successfully 
built the program. If you click "Debug Anyway" it will run the old 
version.</p>
      <p>If you "Debug Anyway" you will be running a program that is 
different from your current code. This leads to lots of confusion, 
because you might make changes to your code, but the program does not 
show the changes.</p>
      <p>To avoid these pitfalls, you should never click "Debug Anyway" 
instead, click "Abort" and track down your errors, or click "Show 
Errors" to go directly to them.</p>
    </div>



    <h3>Design</h3>
    <p>You will work with your team to create a design for this program.
 Then, you will each write the code for the program individually.</p>

    <details>
      <summary>Final Design (Do not open until after your design meeting)</summary>
      <p>For reference purposes, here is a copy of the design that was created during the design activity.</p>
      
      <p>In order to understand the decisions that led to this design, make sure to walk through <a href="https://byui-cse.github.io/cse210-ww-course-2023/week02/design.html">the design activity</a> step by step before using this design to start your code.</p>

      <figure>
        <img src="CSE%20210%20Abstraction%20Programming%20Assignment_files/journal-program-class-diagram.png" alt="Journal program class diagram">
      </figure>

    </details>

    <h3>Develop the Program</h3>
    <p>In the course repository, find the <code>Develop02</code> project in the <code>Prove</code> folder and write your program there.</p>


    <h3>Submission</h3>
    <ol>
      <li>Develop the program using the principle of Abstraction as described above.</li>
      <li>Make sure to describe anything you have done to exceed the requirements in comments in the Program.cs file.</li>
      <li>Commit your source code and push it to GitHub.</li>
      <li>Verify that you can see your updated code at GitHub.</li>
      <li>In I-Learn, submit a link to your GitHub repository. In the 
submission comment, describe anything you have done to show creativity 
and exceed the core requirements.</li>
    </ol>

    <div class="callout warning">
      <h4>Working with Others</h4>

      <p>In this course you are encouraged to help and teach one another. But keep in mind that the goal is for you to <strong>learn</strong> how to write these programs yourself, not simply to turn in a working program.</p>

      <p>Because the goal is for you to learn to write these programs on your own, you should <strong><em>NOT</em></strong> copy and paste any code from another student or from a repository you find online. Similarly, you should <strong><em>NOT</em></strong>
 look at their code and type it in directly from a picture or from what 
you see on your screen. This is a violation of the University Honor 
Code, will result in a 0 on the assignment or failing the class, and 
will not help you learn.</p>

      <p>Instead, when you get help from another person, you should try 
to understand the principle of what they are doing, and then, use that 
to help you write your own code.</p>

      <p>If you get help from a web page, include a link to that web page in your comments.</p>

      <p>If you have any questions about this, please talk with your instructor.</p>
    </div>



  </main>

  <footer>
    <p>Copyright © Brigham Young University-Idaho | All rights reserved</p>
  </footer>
  <script src="CSE%20210%20Abstraction%20Programming%20Assignment_files/highlight.min.js"></script>
  <script>hljs.highlightAll();</script>



</body></html>